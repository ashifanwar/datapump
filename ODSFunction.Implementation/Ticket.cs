using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;

namespace ODSFunction.Implementation
{
    public class Ticket : StoredResource
    {
        /// <summary>
        /// Unique identifier for the ticket.
        /// </summary>
        public override string Id { get; set; }

        /// <summary>
        /// Ticket status.
        /// </summary>
        public string Status { get; set; }

        /// <summary>
        /// Optional Merchant generated TicketId (Receipt #) often referred to as terminal sequence number or receipt number
        /// </summary>
        public string MerchantTicketId { get; set; }

        /// <summary>
        /// Externally generated ticket level ID, example, could be generated by the WalletProvider
        /// </summary>
        public string ExternalTicketId { get; set; }

        /// <summary>
        /// ID of the ticket current ticket is referencing to if any.
        /// </summary>
        public string ReferencedTicketId { get; set; }

        /// <summary>
        /// Original pairing token.
        /// </summary>
        public string PairingToken { get; set; }

        /// <summary>
        /// Initial intent current ticket was created with.
        /// </summary>
        public string Intent { get; set; }

        [JsonIgnore]
        public TicketActivityType IntentEnum
        {
            get
            {
                TicketActivityType intentEnum;
                if (string.IsNullOrWhiteSpace(this.Intent) && Enum.TryParse(this.Intent, true, out intentEnum))
                {
                    return intentEnum;
                }
                return TicketActivityType.Undefined;
            }
        }

        /// <summary>
        /// ID provided by a merchant during the course of a ticket to identify a POS/Terminal/Pump/Lane in a single MCXMID, 
        /// (Required for Closing a Ticket or Processing a TenderAuth)
        /// </summary>
        public string TerminalId { get; set; }

        /// <summary>
        /// Optional (Required before Closing Ticket) Merchant provided Date for the ticket, 
        /// same value that would be presented on the merchant's printed receipt for the ticket
        /// </summary>
        public DateTime LocalDateTime { get; set; }

        /// <summary>
        /// Merchant provided total dollar amount of the Ticket; can be updated at anytime prior to Close; 
        /// (required for Ticket Close)
        /// </summary>
        public double? TotalAmount { get; set; }

        /// <summary>
        /// Describes the currency type
        /// </summary>
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Merchant provided value to identify the cashier; may not exceed 8 characters, usually a numeric value.
        /// </summary>
        public string CashierId { get; set; }

        /// <summary>
        /// Optional Consumer provided reference (Purchase Order # etc.)
        /// </summary>
        public string ConsumerReferenceId { get; set; }

        /// <summary>
        /// Optional Merchant provided Time for the ticket, same value that would be 
        /// presented on the merchant's printed receipt for the ticket
        /// </summary>
        public string ReceiptURL { get; set; }

        /// <summary>
        /// Optional merchant provided value that the merchant can scan in order to lookup a 
        /// particular Ticket.If not provided by the merchant and a Merchant Return Code Format is 
        /// Provided, MCX will create numeric value that points to the TicketID
        /// </summary>
        public string ReturnCode { get; set; }

        /// <summary>
        /// For a closed ticket only, identifies if the consumer has flagged the transaction to request a refund
        /// </summary>
        public bool? RefundRequestFlag { get; set; }

        /// <summary>
        /// The format should be used to display the Merchant Return Code, such as UPC128, PDF417.
        /// MCX Merchant onboarding at Brand Level - will identify the format at the MCXMID
        /// </summary>
        public string ReturnCodeFormat { get; set; }

        /// <summary>
        /// Pairing complete timestamp
        /// </summary>
        public DateTime? PairingCompleteDateTime { get; set; }

        /// <summary>
        /// Ticket closed timestamp
        /// </summary>
        public DateTime? ClosedDateTime { get; set; }

        /// <summary>
        /// Explanantion for cancellation
        /// </summary>
        public string CancelText { get; set; }

        /// <summary>
        /// Message from the merchant
        /// </summary>
        public string MerchantMessage { get; set; }

        /// <summary>
        /// Grab-bag of info from the POS intended to be shared with all parties
        /// </summary>
        public JObject AdditionalPOSInfoShared { get; set; }

        /// <summary>
        /// Grab bag of info from the POS intended to be referenced by the merchant only
        /// </summary>
        public JObject AdditionalPOSInfo { get; set; }

        /// <summary>
        /// Grab-bag of info from the app intended to be shared with all parties
        /// </summary>
        public JObject AdditionalAppInfoShared { get; set; }

        /// <summary>
        /// Grab-bag of info from the app
        /// </summary>
        public JObject AdditionalAppInfo { get; set; }

        public List<LineItem> LineItems { get; set; }

        public FuelSiteDetails FuelSiteDetails { get; set; }

        public FuelSiteSelection FuelSiteSelection { get; set; }

        public AdditionalAmount AdditionalAmounts { get; set; }

        /// <summary>
        /// Consumer information in the context of current ticket.
        /// </summary>
        public WalletInfo Wallet { get; set; }

        /// <summary>
        /// Provides data about the User's Device used in the Ticket.
        /// </summary>
        public DeviceInfo Device { get; set; }

        /// <summary>
        /// Provides data about the Merchant Location joining the Ticket
        /// </summary>
        public LocationInfo Location { get; set; }

        public ApplicationInfo Application { get; set; }

        public IDictionary<string, string> SessionParameters { get; set; }

        /// <summary>
        /// Tenders offered as part of settlement for the current ticket.
        /// </summary>
        public IList<Tender> Tenders { get; set; }

        /// <summary>
        /// List of payment authorizations issued against current ticket.
        /// </summary>
        //public IList<TenderAuth> TenderAuths { get; set; }

        /// <summary>
        /// Merchant receipt information.
        /// </summary>
        public JObject Receipt { get; set; }

        /// <summary>
        /// Hashed copy of the pairing token
        /// </summary>
        public string PairingKey { get; set; }

        public string MarketingMessage { get; set; }

        public double? AppLatitude { get; set; }

        public double? AppLongitude { get; set; }

        public IList<SalesCode> SalesCodes { get; set; }

        /// <summary>
        /// Utility property to determine whether a Ticket Status is terminal
        /// </summary>
        public bool IsTerminalStatus
        {
            get
            {
                var isTerminal = false;

                var ticketStatus = TicketStatus.Active;
                if (Enum.TryParse(this.Status, true, out ticketStatus))
                {
                    switch (ticketStatus)
                    {
                        case TicketStatus.Closed:
                        case TicketStatus.Cancelled:
                        case TicketStatus.PreAuthCancelled:
                            isTerminal = true;
                            break;
                    }
                }

                return isTerminal;
            }
        }

        public override string SchemaVersion
        {
            get { return "1.1.0.3"; }
            protected set
            {

            }
        }


    }

    public enum TicketStatus
    {
        Created,
        Active,
        TenderRequired,
        TenderAvailable,
        PendingTenderAuth,
        Closed,
        Cancelled,
        PreAuthAvailable,
        PreAuthCancelled,
        SiteSelectionsAvailable,
        SiteDetailsAvailable,
        SiteDetailsRequired,
        EnterAccessCode,
        BeginFueling,
        PumpUnavailable,
        TipSelectionRequired,
        TipSelectionAvailable
    }

    public enum TicketActivityType
    {
        Undefined,
        Purchase,
        Refund,
        Adjustment,
        PayAtPump,
        PayAtTable,
        Sale,
        ECommerce
    }

    public class SalesCode
    {
        public string Code { get; set; }
        public string CodeDescription { get; set; }
        public string CodeCategory { get; set; }
        public DateTime CodeExpirationDate { get; set; }
    }
}
